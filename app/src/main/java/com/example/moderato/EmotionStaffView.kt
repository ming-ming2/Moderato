package com.example.moderato

import android.content.Context
import android.graphics.*
import android.util.AttributeSet
import android.view.View
import androidx.core.content.ContextCompat
import kotlin.math.min

class EmotionStaffView @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyleAttr: Int = 0
) : View(context, attrs, defStyleAttr) {

    private val staffPaint = Paint().apply {
        shader = LinearGradient(0f, 0f, 100f, 0f,
            Color.parseColor("#40FFFFFF"),
            Color.parseColor("#20FFFFFF"),
            Shader.TileMode.CLAMP)
        strokeWidth = 3f
        style = Paint.Style.STROKE
        isAntiAlias = true
    }

    private val backgroundPaint = Paint().apply {
        shader = LinearGradient(0f, 0f, 0f, 200f,
            Color.parseColor("#2A2D3A"),
            Color.parseColor("#1A1B23"),
            Shader.TileMode.CLAMP)
        style = Paint.Style.FILL
    }

    private val trebleClefPaint = Paint().apply {
        color = ContextCompat.getColor(context, R.color.primary_pink)
        textSize = 80f
        isAntiAlias = true
        typeface = Typeface.DEFAULT_BOLD
        setShadowLayer(4f, 0f, 3f, Color.parseColor("#40000000"))
    }

    private val keySignaturePaint = Paint().apply {
        color = ContextCompat.getColor(context, R.color.text_primary)
        textSize = 28f
        isAntiAlias = true
        typeface = Typeface.DEFAULT_BOLD
    }

    private val tempoPaint = Paint().apply {
        color = ContextCompat.getColor(context, R.color.text_secondary)
        textSize = 18f
        isAntiAlias = true
        typeface = Typeface.DEFAULT
    }

    private val glowPaint = Paint().apply {
        isAntiAlias = true
        style = Paint.Style.FILL
        maskFilter = BlurMaskFilter(8f, BlurMaskFilter.Blur.NORMAL)
    }

    private var emotions = listOf<EmotionNote>()
    private var currentKey = "C Major"
    private var currentTempo = "Moderato"

    data class EmotionNote(
        val symbol: String,
        val pitch: Int,
        val time: String
    )

    fun setEmotions(emotions: List<EmotionNote>, key: String = "C Major", tempo: String = "Moderato") {
        this.emotions = emotions
        this.currentKey = key
        this.currentTempo = tempo
        invalidate()
    }

    override fun onDraw(canvas: Canvas) {
        super.onDraw(canvas)

        // Î∞∞Í≤Ω Í∑∏ÎùºÎç∞Ïù¥ÏÖò
        canvas.drawRect(0f, 0f, width.toFloat(), height.toFloat(), backgroundPaint)

        val centerX = width / 2f
        val centerY = height / 2f
        val staffSpacing = 32f
        val staffWidth = min(width * 0.95f, 450f)
        val staffStartX = centerX - staffWidth / 2
        val staffEndX = centerX + staffWidth / 2

        // Í≥†Í∏âÏä§Îü¨Ïö¥ Ïò§ÏÑ†ÏßÄ Í∑∏Î¶¨Í∏∞
        drawStaffLines(canvas, staffStartX, staffEndX, centerY, staffSpacing)

        // ÎÜíÏùÄÏùåÏûêÎ¶¨Ìëú (Îçî ÏòàÏÅòÍ≤å)
        drawTrebleClef(canvas, staffStartX, centerY)

        // Ï°∞ÏÑ±Í≥º ÌÖúÌè¨ ÌëúÏãú
        drawKeyAndTempo(canvas, staffStartX, centerY)

        // Í∞êÏ†ï ÏùåÌëúÎì§ Í∑∏Î¶¨Í∏∞ (ÏóÖÍ∑∏Î†àÏù¥Îìú)
        if (emotions.isNotEmpty()) {
            drawEmotionNotes(canvas, staffStartX, staffWidth, centerY, staffSpacing)
        }

        // ÎßàÎîîÏÑ† (Îçî Î©ãÏßÄÍ≤å)
        drawBarLine(canvas, staffEndX, centerY, staffSpacing)
    }

    private fun drawStaffLines(canvas: Canvas, startX: Float, endX: Float, centerY: Float, spacing: Float) {
        for (i in 0..4) {
            val y = centerY - 64f + (i * spacing)

            // Í∑∏ÎùºÎç∞Ïù¥ÏÖò ÎùºÏù∏ÏúºÎ°ú Îçî Í≥†Í∏âÏä§ÎüΩÍ≤å
            val linePaint = Paint(staffPaint)
            canvas.drawLine(startX, y, endX, y, linePaint)

            // ÎØ∏ÏÑ∏Ìïú Í∏ÄÎ°úÏö∞ Ìö®Í≥º
            val glowLine = Paint().apply {
                color = Color.parseColor("#30FFFFFF")
                strokeWidth = 6f
                style = Paint.Style.STROKE
                isAntiAlias = true
                maskFilter = BlurMaskFilter(3f, BlurMaskFilter.Blur.NORMAL)
            }
            canvas.drawLine(startX, y, endX, y, glowLine)
        }
    }

    private fun drawTrebleClef(canvas: Canvas, startX: Float, centerY: Float) {
        // Í∏ÄÎ°úÏö∞ Ìö®Í≥º
        glowPaint.color = Color.parseColor("#60FF6B9D")
        canvas.drawText("ùÑû", startX - 60f, centerY + 20f, glowPaint)

        // Î©îÏù∏ ÎÜíÏùÄÏùåÏûêÎ¶¨Ìëú
        canvas.drawText("ùÑû", startX - 60f, centerY + 20f, trebleClefPaint)
    }

    private fun drawKeyAndTempo(canvas: Canvas, startX: Float, centerY: Float) {
        canvas.drawText(currentKey, startX + 40f, centerY - 90f, keySignaturePaint)
        canvas.drawText("‚ô© = $currentTempo", startX + 40f, centerY - 60f, tempoPaint)
    }

    private fun drawEmotionNotes(canvas: Canvas, startX: Float, staffWidth: Float, centerY: Float, spacing: Float) {
        val noteSpacing = staffWidth / (emotions.size + 1)

        emotions.forEachIndexed { index, emotion ->
            val noteX = startX + noteSpacing * (index + 1)
            val noteY = getNoteY(centerY, emotion.pitch, spacing)

            // Í∏ÄÎ°úÏö∞ Ìö®Í≥º Î®ºÏ†Ä
            drawNoteGlow(canvas, noteX, noteY, emotion.symbol)

            // Ïã§Ï†ú ÏùåÌëú
            drawBeautifulNote(canvas, noteX, noteY, emotion.symbol)

            // ÏãúÍ∞Ñ ÎùºÎ≤® (Îçî ÏòàÏÅòÍ≤å)
            drawTimeLabel(canvas, noteX, centerY, emotion.time)
        }
    }

    private fun drawNoteGlow(canvas: Canvas, x: Float, y: Float, symbol: String) {
        val glowColor = when (symbol) {
            "‚ô™" -> Color.parseColor("#80FFD700") // Í∏∞ÏÅ® - Ìô©Í∏à Í∏ÄÎ°úÏö∞
            "‚ô©" -> Color.parseColor("#608B5CF6") // ÌèâÏò® - Î≥¥Îùº Í∏ÄÎ°úÏö∞
            "‚ô´" -> Color.parseColor("#80FFB366") // ÏÑ§Î†ò - Ïò§Î†åÏßÄ Í∏ÄÎ°úÏö∞ (Îçî Î∞ùÍ≤å)
            "‚ô≠" -> Color.parseColor("#606366F1") // Ïä¨Ìîî - Î∏îÎ£® Í∏ÄÎ°úÏö∞
            "‚ôØ" -> Color.parseColor("#80F43F5E") // ÌôîÎÇ® - Î†àÎìú Í∏ÄÎ°úÏö∞ (Îçî Î∞ùÍ≤å)
            "ùÑ¢" -> Color.parseColor("#606B7280") // Î∂àÏïà - ÌöåÏÉâ Í∏ÄÎ°úÏö∞
            "‚ô°" -> Color.parseColor("#80F59E0B") // ÏÇ¨Îûë - Îî∞ÎúªÌïú Ï£ºÌô© Í∏ÄÎ°úÏö∞
            else -> Color.parseColor("#60FFFFFF")
        }

        glowPaint.color = glowColor

        // Í∞êÏ†ïÏóê Îî∞Îùº Í∏ÄÎ°úÏö∞ ÌÅ¨Í∏∞ÎèÑ Îã§Î•¥Í≤å
        val glowRadius = when (symbol) {
            "‚ô™" -> 30f  // Í∏∞ÏÅ® - ÌÅ∞ Í∏ÄÎ°úÏö∞ (ÌôúÍ∏∞Ï∞®Îã§)
            "‚ô©" -> 25f  // ÌèâÏò® - Ï§ëÍ∞Ñ Í∏ÄÎ°úÏö∞ (ÏïàÏ†ïÍ∞ê)
            "‚ô´" -> 35f  // ÏÑ§Î†ò - Í∞ÄÏû• ÌÅ∞ Í∏ÄÎ°úÏö∞ (ÎëêÍ∑ºÍ±∞Î¶º)
            "‚ô≠" -> 20f  // Ïä¨Ìîî - ÏûëÏùÄ Í∏ÄÎ°úÏö∞ (Ïπ®Ïö∏Ìï®)
            "‚ôØ" -> 28f  // ÌôîÎÇ® - ÌÅ∞ Í∏ÄÎ°úÏö∞ (Í∞ïÎ†¨Ìï®)
            "ùÑ¢" -> 18f  // Î∂àÏïà - Í∞ÄÏû• ÏûëÏùÄ Í∏ÄÎ°úÏö∞ (ÏúÑÏ∂ïÎê®)
            "‚ô°" -> 32f  // ÏÇ¨Îûë - ÌÅ∞ Í∏ÄÎ°úÏö∞ (Îî∞ÎúªÌï®)
            else -> 25f
        }

        canvas.drawCircle(x, y, glowRadius, glowPaint)
    }

    private fun drawBeautifulNote(canvas: Canvas, x: Float, y: Float, symbol: String) {
        val notePaint = Paint().apply {
            isAntiAlias = true
            style = Paint.Style.FILL
            setShadowLayer(3f, 1f, 2f, Color.parseColor("#40000000"))
        }

        when (symbol) {
            "‚ô™" -> {
                // Í∏∞ÏÅ® - Ìô©Í∏àÎπõ 8Î∂ÑÏùåÌëú (ÌôúÍ∏∞Ï∞®Í≥† Î∞ùÍ≤å)
                notePaint.shader = RadialGradient(x, y, 18f,
                    Color.parseColor("#FFD700"),
                    Color.parseColor("#FF6B9D"),
                    Shader.TileMode.CLAMP)
                canvas.drawCircle(x, y, 16f, notePaint)

                // ÏùåÌëú Í∏∞Îë• (ÏúÑÎ°ú Ìñ•ÌïòÎäî ÌôúÍ∏∞Ï∞¨ ÎäêÎÇå)
                val stemPaint = Paint(notePaint).apply {
                    shader = LinearGradient(x, y, x, y - 60f,
                        Color.parseColor("#FF6B9D"),
                        Color.parseColor("#FFD700"),
                        Shader.TileMode.CLAMP)
                    strokeWidth = 5f
                    style = Paint.Style.STROKE
                }
                canvas.drawLine(x + 16f, y, x + 16f, y - 60f, stemPaint)

                // 8Î∂ÑÏùåÌëú Íº¨Î¶¨ (Í≤ΩÏæåÌïú Í≥°ÏÑ†)
                val path = Path().apply {
                    moveTo(x + 16f, y - 50f)
                    quadTo(x + 35f, y - 40f, x + 30f, y - 20f)
                }
                canvas.drawPath(path, stemPaint)

                // Î∞òÏßùÏù¥Îäî ÌïòÏù¥ÎùºÏù¥Ìä∏
                val highlight = Paint().apply {
                    color = Color.parseColor("#90FFFFFF")
                    style = Paint.Style.FILL
                }
                canvas.drawCircle(x - 6f, y - 6f, 8f, highlight)
            }
            "‚ô©" -> {
                // ÌèâÏò® - Î∂ÄÎìúÎü¨Ïö¥ 4Î∂ÑÏùåÌëú (ÏïàÏ†ïÏ†ÅÏù¥Í≥† Ï∞®Î∂ÑÌïòÍ≤å)
                notePaint.shader = RadialGradient(x, y, 16f,
                    Color.parseColor("#8B5CF6"),
                    Color.parseColor("#6366F1"),
                    Shader.TileMode.CLAMP)
                canvas.drawCircle(x, y, 14f, notePaint)

                // Ï∞®Î∂ÑÌïú Í∏∞Îë•
                val stemPaint = Paint(notePaint).apply {
                    shader = null
                    color = Color.parseColor("#6366F1")
                    strokeWidth = 4f
                    style = Paint.Style.STROKE
                }
                canvas.drawLine(x + 14f, y, x + 14f, y - 45f, stemPaint)
            }
            "‚ô´" -> {
                // ÏÑ§Î†ò - Ïó∞Í≤∞Îêú 16Î∂ÑÏùåÌëú (ÎëêÍ∑ºÍ±∞Î¶¨Îäî ÎäêÎÇå)
                notePaint.color = Color.parseColor("#FFB366")

                // Îëê Í∞úÏùò ÏùåÌëú Î®∏Î¶¨ (ÎëêÍ∑ºÎëêÍ∑º)
                canvas.drawCircle(x - 10f, y - 5f, 12f, notePaint)
                canvas.drawCircle(x + 10f, y + 5f, 12f, notePaint)

                // Ïó∞Í≤∞ Í∏∞Îë•Îì§
                val stemPaint = Paint(notePaint).apply {
                    strokeWidth = 4f
                    style = Paint.Style.STROKE
                }
                canvas.drawLine(x - 10f + 12f, y - 5f, x - 10f + 12f, y - 50f, stemPaint)
                canvas.drawLine(x + 10f + 12f, y + 5f, x + 10f + 12f, y - 40f, stemPaint)

                // ÎëêÍ∑ºÍ±∞Î¶¨Îäî Ïó∞Í≤∞ÏÑ† (2Í∞ú)
                canvas.drawLine(x - 10f + 12f, y - 50f, x + 10f + 12f, y - 40f, stemPaint)
                canvas.drawLine(x - 10f + 12f, y - 45f, x + 10f + 12f, y - 35f, stemPaint)
            }
            "‚ô≠" -> {
                // Ïä¨Ìîî - ÌîåÎû´ Í∏∞Ìò∏ÏôÄ Ìï®Íªò ÎÇÆÏùÄ ÏùåÌëú (Ïï†Ï†àÌïòÍ≤å)
                notePaint.shader = RadialGradient(x, y, 16f,
                    Color.parseColor("#6366F1"),
                    Color.parseColor("#1E40AF"),
                    Shader.TileMode.CLAMP)
                canvas.drawCircle(x, y, 14f, notePaint)

                // ÌîåÎû´ Í∏∞Ìò∏ Í∑∏Î¶¨Í∏∞
                val flatPaint = Paint().apply {
                    color = Color.parseColor("#1E40AF")
                    strokeWidth = 3f
                    style = Paint.Style.STROKE
                    isAntiAlias = true
                }
                canvas.drawLine(x - 25f, y - 20f, x - 25f, y + 10f, flatPaint)

                val flatPath = Path().apply {
                    moveTo(x - 25f, y - 5f)
                    quadTo(x - 15f, y - 15f, x - 18f, y)
                    quadTo(x - 15f, y + 5f, x - 25f, y)
                }
                canvas.drawPath(flatPath, flatPaint)
            }
            "‚ôØ" -> {
                // ÌôîÎÇ® - ÏÉµ Í∏∞Ìò∏ÏôÄ Í∞ïÎ†¨Ìïú ÏùåÌëú (ÎÇ†Ïπ¥Î°≠Í≤å)
                notePaint.shader = RadialGradient(x, y, 16f,
                    Color.parseColor("#F43F5E"),
                    Color.parseColor("#DC2626"),
                    Shader.TileMode.CLAMP)
                canvas.drawCircle(x, y, 14f, notePaint)

                // ÏÉµ Í∏∞Ìò∏ Í∑∏Î¶¨Í∏∞ (ÎÇ†Ïπ¥Î°≠Í≤å)
                val sharpPaint = Paint().apply {
                    color = Color.parseColor("#DC2626")
                    strokeWidth = 4f
                    style = Paint.Style.STROKE
                    isAntiAlias = true
                }
                // ÏÑ∏Î°úÏÑ† 2Í∞ú
                canvas.drawLine(x - 30f, y - 15f, x - 30f, y + 15f, sharpPaint)
                canvas.drawLine(x - 22f, y - 15f, x - 22f, y + 15f, sharpPaint)
                // Í∞ÄÎ°úÏÑ† 2Í∞ú (ÏïΩÍ∞Ñ Í∏∞Ïö∏Ïñ¥ÏßÑ)
                canvas.drawLine(x - 35f, y - 8f, x - 17f, y - 5f, sharpPaint)
                canvas.drawLine(x - 35f, y + 5f, x - 17f, y + 8f, sharpPaint)
            }
            "ùÑ¢" -> {
                // Î∂àÏïà - ÎÇÆÏùÄÏùåÏûêÎ¶¨ÌëúÏôÄ Ìï®Íªò (Î∂àÏïàÏ†ïÌïòÍ≤å)
                notePaint.shader = RadialGradient(x, y, 16f,
                    Color.parseColor("#6B7280"),
                    Color.parseColor("#374151"),
                    Shader.TileMode.CLAMP)
                canvas.drawCircle(x, y, 14f, notePaint)

                // ÎÇÆÏùÄÏùåÏûêÎ¶¨Ìëú Í∏∞Ìò∏
                val bassPaint = Paint().apply {
                    color = Color.parseColor("#374151")
                    textSize = 24f
                    isAntiAlias = true
                    textAlign = Paint.Align.CENTER
                }
                canvas.drawText("ùÑ¢", x - 25f, y + 8f, bassPaint)
            }
            "‚ô°" -> {
                // ÏÇ¨Îûë - ÌïòÌä∏ Î™®Ïñë ÏùåÌëú (Îî∞ÎúªÌïòÍ≤å)
                notePaint.shader = RadialGradient(x, y, 16f,
                    Color.parseColor("#F59E0B"),
                    Color.parseColor("#F43F5E"),
                    Shader.TileMode.CLAMP)

                // ÌïòÌä∏ Î™®ÏñëÏúºÎ°ú Í∑∏Î¶¨Í∏∞
                val heartPath = Path().apply {
                    moveTo(x, y + 8f)
                    cubicTo(x - 20f, y - 8f, x - 35f, y + 5f, x, y + 20f)
                    cubicTo(x + 35f, y + 5f, x + 20f, y - 8f, x, y + 8f)
                }
                canvas.drawPath(heartPath, notePaint)

                // ÌïòÌä∏ ÏïàÏóê ÏûëÏùÄ ÌïòÏù¥ÎùºÏù¥Ìä∏
                val highlight = Paint().apply {
                    color = Color.parseColor("#90FFFFFF")
                    style = Paint.Style.FILL
                }
                canvas.drawCircle(x - 5f, y - 2f, 4f, highlight)
            }
            else -> {
                // Í∏∞Î≥∏ ÏùåÌëú
                notePaint.color = Color.parseColor("#FFFFFF")
                canvas.drawCircle(x, y, 12f, notePaint)
            }
        }
    }

    private fun drawTimeLabel(canvas: Canvas, x: Float, centerY: Float, time: String) {
        val labelPaint = Paint().apply {
            color = Color.parseColor("#B0B3B8")
            textSize = 16f
            isAntiAlias = true
            textAlign = Paint.Align.CENTER
            typeface = Typeface.DEFAULT_BOLD
        }

        // Î∞∞Í≤Ω ÏõêÌòï ÌÉúÍ∑∏ (Îçî ÌÅ¨Í≤å)
        val bgPaint = Paint().apply {
            color = Color.parseColor("#50FFFFFF")
            style = Paint.Style.FILL
            isAntiAlias = true
        }

        canvas.drawCircle(x, centerY + 90f, 20f, bgPaint)
        canvas.drawText(time, x, centerY + 96f, labelPaint)
    }

    private fun drawBarLine(canvas: Canvas, endX: Float, centerY: Float, spacing: Float) {
        val barPaint = Paint().apply {
            shader = LinearGradient(0f, centerY - 64f, 0f, centerY + 64f,
                Color.parseColor("#80FFFFFF"),
                Color.parseColor("#30FFFFFF"),
                Shader.TileMode.CLAMP)
            strokeWidth = 4f
            style = Paint.Style.STROKE
            isAntiAlias = true
        }

        canvas.drawLine(endX + 25f, centerY - 64f, endX + 25f, centerY + 64f, barPaint)
    }

    private fun getNoteY(centerY: Float, pitch: Int, spacing: Float): Float {
        return when (pitch) {
            1 -> centerY + 80f  // ÎÇÆÏùÄ Î†à (Î∂àÏïà - ÏïÑÎûòÏ™Ω)
            2 -> centerY + 64f  // ÎØ∏ (Ïä¨Ìîî - Ï≤´ Î≤àÏß∏ ÏÑ†)
            3 -> centerY + 48f  // Ìåå
            4 -> centerY + 32f  // ÏÜî (Í∏∞Î≥∏ - Îëê Î≤àÏß∏ ÏÑ†)
            5 -> centerY + 16f  // Îùº (ÌèâÏò® - ÏÑ∏ Î≤àÏß∏ ÏÑ† ÏúÑ)
            6 -> centerY + 0f   // Ïãú (ÌôîÎÇ®/ÏÇ¨Îûë - ÏÑ∏ Î≤àÏß∏ ÏÑ†)
            7 -> centerY - 16f  // ÎÜíÏùÄ ÎèÑ (Í∏∞ÏÅ® - ÏúÑÏ™Ω)
            8 -> centerY - 32f  // ÎÜíÏùÄ Î†à (ÏÑ§Î†ò - Í∞ÄÏû• ÏúÑ)
            else -> centerY + 32f // Í∏∞Î≥∏Í∞í
        }
    }
}